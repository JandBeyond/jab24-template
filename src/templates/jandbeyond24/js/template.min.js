"use strict";

document.querySelector('.headerbar__navtoggler').addEventListener('click', () => {
 document.body.classList.toggle('body--activenav');
 if(document.querySelector('.headerbar__navtoggler').innerText === 'MENU') {
   document.querySelector('.headerbar__navtoggler').innerText = 'CLOSE';
 } else {
   document.querySelector('.headerbar__navtoggler').innerText = 'MENU';
 }
});

window.addEventListener('scroll', () => {
 if(window.scrollY > 0) {
  document.body.classList.add('body--isscrolled');
 } else {
  document.body.classList.remove('body--isscrolled');
 }
});

let decorationwaves = document.querySelectorAll('.wavedecoration');
if (decorationwaves.length > 0 ) {
  for (let decorationwave of decorationwaves) {
    window.addEventListener('scroll', function () {
      if (decorationwave.getBoundingClientRect().top > window.innerHeight && decorationwave.getBoundingClientRect().bottom > window.innerHeight) {
        return
      }
      if (decorationwave.getBoundingClientRect().top < window.innerHeight && decorationwave.getBoundingClientRect().bottom < 0) {
        return
      }
      if (decorationwave.getBoundingClientRect().top < window.innerHeight && decorationwave.getBoundingClientRect().bottom > 0) {
        const Position = (map((decorationwave.getBoundingClientRect().top - window.innerHeight) * -1, 0, window.innerHeight * 2, 0, 150));
        decorationwave.style.backgroundPositionX = Position + '%';
      }
    })
  }
}

function map (num, in_min, in_max, out_min, out_max) {
  return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

"use strict";

JCaption = {}; 

ConferencePlus = window.ConferencePlus || {};
ConferencePlus = {
  nextNomination: 0,
  area: {},
  clonedArea: {},
  addNomination: function addNomination() {
    var html = this.clonedArea.html();
    var newhtml = html.replace(/nominee/g, 'nominee_' + this.nextNomination).replace(/awardcategory_id/g, 'awardcategory_id_' + this.nextNomination);
    this.increasenextNominationNumber();
    newhtml = '<div id="nomination' + this.nextNomination + '">' + newhtml + '</div>';
    document.querySelector('.nominationlist').append(newhtml);
    document.querySelector('input[name="nominationcount"]').value(this.nextNomination);
  },
  relaceId: function relaceId() {
    var html = this.clonedArea.html();
    newhtml = html.replace('nominee', 'nominee_' + this.nextNomination, 'gm').replace('awardcategory_id', 'awardcategory_id_' + this.nextNomination, 'gm');
    return newhtml;
  },
  setnextNominationNumber: function setnextNominationNumber() {
    this.nextNomination = parseInt(document.querySelector('input[name="nominationcount"]').value());
  },
  increasenextNominationNumber: function increasenextNominationNumber() {
    this.nextNomination++;
  },
  setArea: function setArea() {
    this.setnextNominationNumber();
    this.area = document.getElementById('#nomination0');
    this.prepareClone();
  },
  prepareClone: function prepareClone() {
    this.clonedArea = this.area.clone();
  }
};

//# sourceMappingURL=template.min.js.map
